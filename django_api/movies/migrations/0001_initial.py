# Generated by Django 4.2.5 on 2023-09-29 07:32

import uuid

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("email", models.EmailField(max_length=255, unique=True, verbose_name="email address")),
                ("is_active", models.BooleanField(default=True)),
                ("is_admin", models.BooleanField(default=False)),
                ("first_name", models.CharField(max_length=255, null=True)),
                ("last_name", models.CharField(max_length=255, null=True)),
            ],
            options={
                "verbose_name": "verbose_name_users",
                "verbose_name_plural": "verbose_name_users_plural",
                "db_table": 'content"."users',
            },
        ),
        migrations.CreateModel(
            name="FilmWork",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("title", models.TextField(verbose_name="title")),
                ("description", models.TextField(blank=True, null=True, verbose_name="description")),
                ("creation_date", models.DateField(blank=True, null=True, verbose_name="creation date")),
                (
                    "rating",
                    models.FloatField(
                        blank=True,
                        default=0,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="rating",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[("movie", "Movie"), ("tv_show", "Tv Show")], max_length=255, verbose_name="type"
                    ),
                ),
                ("file_path", models.TextField(blank=True, null=True, verbose_name="file path")),
            ],
            options={
                "verbose_name": "film",
                "verbose_name_plural": "films",
                "db_table": 'content"."film_work',
            },
        ),
        migrations.CreateModel(
            name="Genre",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=255, verbose_name="name")),
                ("description", models.TextField(blank=True, null=True, verbose_name="description")),
            ],
            options={
                "verbose_name": "genre",
                "verbose_name_plural": "genres",
                "db_table": 'content"."genre',
            },
        ),
        migrations.CreateModel(
            name="Person",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("full_name", models.TextField()),
            ],
            options={
                "verbose_name": "person",
                "verbose_name_plural": "persons",
                "db_table": 'content"."person',
            },
        ),
        migrations.CreateModel(
            name="PersonFilmWork",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                (
                    "role",
                    models.CharField(
                        choices=[("actor", "Actor"), ("director", "Director"), ("writer", "Writer")],
                        max_length=255,
                        verbose_name="role",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("film_work", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="movies.filmwork")),
                ("person", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="movies.person")),
            ],
            options={
                "db_table": 'content"."person_film_work',
            },
        ),
        migrations.CreateModel(
            name="GenreFilmWork",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("film_work", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="movies.filmwork")),
                ("genre", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="movies.genre")),
            ],
            options={
                "db_table": 'content"."genre_film_work',
            },
        ),
        migrations.AddField(
            model_name="filmwork",
            name="film_genres",
            field=models.ManyToManyField(through="movies.GenreFilmWork", to="movies.genre"),
        ),
        migrations.AddField(
            model_name="filmwork",
            name="persons",
            field=models.ManyToManyField(through="movies.PersonFilmWork", to="movies.person"),
        ),
        migrations.AddIndex(
            model_name="personfilmwork",
            index=models.Index(fields=["film_work", "person", "role"], name="film_person_work_idx"),
        ),
        migrations.AddConstraint(
            model_name="personfilmwork",
            constraint=models.UniqueConstraint(fields=("film_work", "person", "role"), name="unique_person_film_role"),
        ),
        migrations.AddIndex(
            model_name="genrefilmwork",
            index=models.Index(fields=["film_work", "genre"], name="film_work_genre_idx"),
        ),
        migrations.AddConstraint(
            model_name="genrefilmwork",
            constraint=models.UniqueConstraint(fields=("film_work", "genre"), name="unique_film_genre"),
        ),
        migrations.AddIndex(
            model_name="filmwork",
            index=models.Index(fields=["creation_date"], name="film_work_creation_date_idx"),
        ),
        migrations.AddIndex(
            model_name="filmwork",
            index=models.Index(fields=["rating"], name="film_work_rating_idx"),
        ),
    ]
